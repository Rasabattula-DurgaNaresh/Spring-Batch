<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Michael R. Lange <michael.r.lange@langmi.de>.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <description>
        Example for generic export from database(*) to another.
        
        Job Flow:
        
            * read from database
            * write to database
            * sql statements provided via spring PropertyPlaceholderConfigurer mechanism
            * example does not worked with named parameters, should not be too hard to extend it 
        
        (*) In this example i use only tables, but it can be extended
        easily with 2 datasources to adress 2 real distinct databases.
    </description>
        
    <!-- 
        inline xmlns, otherwise it would look like 
        'batch:job, batch:step, etc.' 
    -->
    <job id="jdbcGenericExportToDatabaseJob" xmlns="http://www.springframework.org/schema/batch">
        <step id="jdbcGenericExportToDatabaseStep">
            <tasklet>
                <chunk 
                    reader="itemReader"
                    writer="itemWriter" 
                    commit-interval="${commit.rate}">
                </chunk>
            </tasklet>
        </step>
    </job>

    <bean id="itemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="sql" value="${read-sql}" />
        <property name="rowMapper">
            <bean class="org.springframework.jdbc.core.ColumnMapRowMapper" />
        </property>
    </bean>

    <bean id="itemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource" />
        <property name="sql" value="${write-sql}" />
        <property name="itemPreparedStatementSetter">
            <bean class="de.langmi.spring.batch.examples.complex.jdbc.generic.support.MapPreparedStatementSetter" />
        </property>        
    </bean>

    <bean id="placeholderProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:spring/batch/job/complex/jdbc/jdbc-generic-export-to-database-job.properties" />
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreUnresolvablePlaceholders" value="false" />
    </bean>

</beans>
