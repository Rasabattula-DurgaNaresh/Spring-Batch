<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Michael R. Lange <michael.r.lange@langmi.de>.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <description>
        Split File Example
        
        Splits a file in two even halves.
        
        - tasklet reads line-count for the input file
        - custom writer controls which lines are written into which output-file

    </description>
    <!-- 
        inline xmlns, otherwise it would look like 
        'batch:job, batch:step, etc.' 
    -->
    <job id="splitFilesSimplejob" xmlns="http://www.springframework.org/schema/batch">
        <step id="getLineCountStep" next="splitFilesStep">
            <tasklet ref="getLineCountTasklet">
                <listeners>
                    <listener ref="promotionListener"/>
                </listeners>
            </tasklet>
        </step>
        <step id="splitFilesStep">
            <tasklet>
                <chunk 
                    reader="itemReader" 
                    writer="itemWriter" 
                    commit-interval="5">
                    <!-- writer added as streams to get file opening/closing for free -->
                    <streams>
                        <stream ref="itemWriterFirst" />
                        <stream ref="itemWriterSecond" />
                    </streams>
                </chunk>
            </tasklet>
        </step>    
    </job>

    <bean id="getLineCountTasklet" 
          class="de.langmi.spring.batch.examples.complex.file.split.GetLineCountTasklet" 
          scope="step">
        <property name="resource" value="#{jobParameters['input.file']}" />
    </bean>
    
    <bean id="itemWriter" 
          class="de.langmi.spring.batch.examples.complex.file.split.SplitFilesItemWriter" 
          scope="step">
        <property name="inputLineCount" value="#{jobExecutionContext['line.count']}" />
        <property name="firstWriter" ref="itemWriterFirst" />
        <property name="secondWriter" ref="itemWriterSecond" />
    </bean>
    
    <bean id="itemReader" 
          class="org.springframework.batch.item.file.FlatFileItemReader" 
          scope="step">
        <property name="resource" value="#{jobParameters['input.file']}" />
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.PassThroughLineMapper" />
        </property>
        <property name="strict" value="true" />
    </bean>

    <bean id="itemWriterFirst" 
          class="org.springframework.batch.item.file.FlatFileItemWriter" 
          scope="step">
        <property name="resource" value="#{jobParameters['output.file.first']}" />
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"/>
        </property>
    </bean>

    <bean id="itemWriterSecond" 
          class="org.springframework.batch.item.file.FlatFileItemWriter" 
          scope="step">
        <property name="resource" value="#{jobParameters['output.file.second']}" />
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"/>
        </property>
    </bean>

    <bean id="promotionListener" 
          class="org.springframework.batch.core.listener.ExecutionContextPromotionListener">
        <description>
            Promotes the value of stepExecution.key 'line.count' to the 
            JobExecutionContext under the same key.
        </description>
        <property name="keys" value="line.count"/>
    </bean>

</beans>
